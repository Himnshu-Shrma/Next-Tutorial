3 required files



api
// service/queries.ts

export interface BundlePackQueryParams {
  facilityCode?: string;
  is_active?: boolean;
}

/**
 * Retrieves bundle packs from Storman Cloud API.
 * If `facilityCode` is provided, it fetches from that facility;
 * otherwise, it fetches all packs from the managing company level.
 *
 * @param params - Optional query parameters for filtering
 * @returns JSON response from the API
 */
export const getBundlePacks = async (params: BundlePackQueryParams) => {
  const API_BASE_URL = "https://your-storman-cloud-url.com/api/v1";

  const url = params.facilityCode
    ? `${API_BASE_URL}/facility/${params.facilityCode}/bundle-packs`
    : `${API_BASE_URL}/managing-company/bundle-packs`;

  const queryParams = new URLSearchParams();
  if (params.is_active !== undefined) {
    queryParams.append("is_active", String(params.is_active));
  }

  try {
    const response = await fetch(`${url}?${queryParams.toString()}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        // Add Authorization header here if required
        // "Authorization": "Bearer YOUR_TOKEN_HERE"
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error("Failed to fetch bundle packs:", error);
    throw error;
  }
};





template
// components/items.tsx
import React from "react";

export interface BundleItem {
  code: string;
  description: string;
  price: number;
  group: string;
  quantity: number;
}

export const BundleItemCard: React.FC<{ item: BundleItem }> = ({ item }) => {
  return (
    <div className="border rounded p-4 shadow-sm mb-2 bg-white">
      <h4 className="font-semibold text-lg">{item.description}</h4>
      <p className="text-sm text-gray-600">Code: {item.code}</p>
      <p className="text-sm text-gray-600">Group: {item.group}</p>
      <p className="text-sm text-gray-600">Quantity: {item.quantity}</p>
      <p className="text-sm text-green-600 font-bold">${item.price.toFixed(2)}</p>
    </div>
  );
};


page

// pages/pages.tsx
import React, { useEffect, useState } from "react";
import { getBundlePacks } from "../service/queries";
import { BundleItemCard, BundleItem } from "../components/items";

interface BundlePack {
  id: number;
  name: string;
  items: BundleItem[];
  price: number;
  is_active: boolean;
  code: string;
  group: string;
  discount_description: string;
}

const BundlePackList: React.FC = () => {
  const [bundlePacks, setBundlePacks] = useState<BundlePack[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPacks = async () => {
      try {
        const data = await getBundlePacks({ is_active: true });
        setBundlePacks(data);
      } catch (error) {
        console.error("Error loading bundle packs:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchPacks();
  }, []);

  if (loading) return <p>Loading...</p>;

  return (
    <div className="p-4 space-y-6">
      {bundlePacks.map((pack) => (
        <div key={pack.id} className="border border-gray-200 rounded p-4 shadow-md bg-gray-50">
          <h2 className="text-xl font-bold mb-2">{pack.name}</h2>
          <p className="text-sm text-gray-700 mb-4">{pack.discount_description}</p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {pack.items.map((item, idx) => (
              <BundleItemCard key={idx} item={item} />
            ))}
          </div>
          <p className="mt-4 text-right font-semibold text-green-700">
            Total Price: ${pack.price.toFixed(2)}
          </p>
        </div>
      ))}
    </div>
  );
};

export default BundlePackList;
